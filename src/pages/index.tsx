import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api, RouterOutputs } from "~/utils/api";
import { Header } from "~/components/Header";
import React, { useState } from "react";
import { NoteEditor } from "~/components/NoteEditor";
import { NoteCard } from "~/components/NoteCard";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "World" });

  return (
    <>
      <Head>
        <title>Note taker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content/>
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs['topic']['getAll'][0]

const Content: React.FC = () => {
  const { data: sessionData } = useSession()

  const [selectTopic, setSelectTopic] = useState<Topic | null>(null)

  const { data: topics, refetch: refetchTopic } = api.topic.getAll.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectTopic(selectTopic ?? data[0] ?? null)
      }
    }
  )

  const { data: notes, refetch: refetchNote } = api.note.getAll.useQuery(
    {
      topicId: selectTopic?.id ?? ""
    },
    {
      enabled: sessionData?.user !== undefined && selectTopic !== null,
    }
  )

  const createTopic = api.topic.createTopic.useMutation({
    onSuccess: () => {
      void refetchTopic()
    }
  }); 

  const createNote = api.note.createNote.useMutation({
    onSuccess: () => {
      void refetchNote()
    }
  }); 


  const deleteNote = api.note.deleteNote.useMutation({
    onSuccess: () => {
      void refetchNote()
    }
  }); 

  return (
    <div className="mx-5 mt-5 grid grid-cols-4 gap-2">
      <div className="px-2">
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic: Topic) => (
            <li key={topic.id}>
              <a href="#"
                onClick={(evt) => {
                  evt.preventDefault()
                  setSelectTopic(topic)
                }}>{topic.title}</a>
             </li>
          ))}
         
        </ul>
        <div className="divider"></div>
        <input
          type="text"
          placeholder="New topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              createTopic.mutate({
                title: e.currentTarget.value
              })
              
              e.currentTarget.value = ""
            }
          }}
        />
      </div>
      <div className="col-span-3">
        <div>
          {notes?.map((note) => (
            <div key={note.id} className="mt-5">
              <NoteCard
                note={note}
                onDelete={() => deleteNote.mutate({id: note.id})}
              />
            </div>
          ))}
        </div>
        <NoteEditor onSave={({ title, content }) => void createNote.mutate({
          title,
          content,
          topicId: selectTopic?.id ?? ""
        })}/>
      </div>
    </div>
  )
  
} 
